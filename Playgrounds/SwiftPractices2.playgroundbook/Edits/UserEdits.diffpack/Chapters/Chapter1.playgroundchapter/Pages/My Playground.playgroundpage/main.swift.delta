<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>//Clas yaratmak
class Dog {
    var name: String
    var breed: String
    init(name:String, breed:String){
        self.name = name
        self.breed = breed
    }
}

let poppy = Dog(name:"Poppy", breed:"Poddle")
print(poppy.breed) //yarattığımız bir nesneyi çağırabiliriz...

    //superclass oluşturmak
class Poddle: Dog {
    init(name: String) {
        super.init(name: name, breed: "Poddle")
    }
}

let karabaş = Poddle(name: "Karabaş")

print(karabaş.breed)

class Dogy {
    func makeNoise() {
        print("Woof!")
    }
}
//override ile fonksiyonu geçersiz kılabiliyoruz.
class Poodlee: Dogy {
    override func makeNoise() {
        print("Yip!")
    }
}
let poppyy = Poodlee()
poppyy.makeNoise()

    // final keyword ile class tanımlanırsa hiçbir sınıf ondan miras alamıyor.

class Singer {
    var name = "Taylor Swift"
}
var singer = Singer()
print(singer.name)

var singerCopy = singer
singerCopy.name = "Aleyna Tilki"
print(singerCopy.name)

    //deinit

class Person {
    var name = "John Doe"
    
    deinit {
        print("\(name) is no more")
    }
    
    func printGreeting() {
        print("Hello, I'm \(name)")
    }
}
for _ in 1...3 {
    let person = Person()
    person.printGreeting()
}

// Day 11/100 Protocols

protocol Payable {
    func calculateWages() -&gt; Int
}

protocol NeedsTraining {
    func study()
}

protocol HasVacation {
    func takeVacation(days: Int)
}

// pek çok protokol oluşturup daha sonrasında tek bir protokol altında çağırabiliyoruz.

// protokol kavramı daha tam oturmadı bu gece araştırmam gerek biraz daha..

protocol Employee: Payable, NeedsTraining, HasVacation { }


// null safety

var age: Int? = nil

var name: String? = nil

//nil ile bir veriyi boş bırakıp daha sonra doldurabiliyoruz.

if let unwrapped = name {
    print("\(unwrapped.count) letters")
} else {
    print("Missing name.")
}

//unwrapped ise o değişkenin nil mi yoksa bir değere sahip olup olmadığını bizlere söylüyor.

func greet(_ name: String?) {
    guard let unwrapped = name else {
        print("You didn't provide a name!")
        return
    }
    
    print("Hello, \(unwrapped)!")
}

greet("Dogancan")

    //Force unwrapping

let str = "5"
let num = Int(str)!
//sonuna ünlem koyarsak kesinlikle bunu int değerine çevir diyoruz, yani değerimiz 5 yerine 5t olsaydı program hata verirdi.


// Day 13

//Bir değişken tanımlarken 

var adsoyad = "Dogancan Mavideniz"

//şeklinde değil de 

var adsoyad2: String

adsoyad2 = "Ümit Ayçiçek"

    // olarak tanımlarsak daha iyi olur.

    // Aynı zamanda bir değişkeni print ederken

var names = "Tim McGraw"
"Your name is " + names

    //yerine

var name2 = "Tim McGraw"
var ag2e = 25
var latitude = 36.166667

"Your name is \(name2), your age is \(ag2e), and your latitude is \(latitude)"

    //şeklinde ifade etmek daha doğru ( e tabiki!)

    // Eğer bir array içinde birden fazla veri tipi bulundurmak istiyorsak Any keywords kullanmalıymışız...

var songs: [Any] = ["Shake it Off", "You Belong with Me", "Back to December", 3]
//loop örneği
for i in 1...10 {
    print("\(i) x 10 is \(i * 10)")
}
</string>
			<key>ModifiedRange</key>
			<string>{0, 3101}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>

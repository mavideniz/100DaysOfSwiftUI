<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>//Değişken tanımlarken var ya da let ile tanımlıyoruz. 
//Daha sonrasında değiştirmeyeceğimiz değişkenleri let ile tanımlarız.
var okulNo = 123
</string>
			<key>ModifiedRange</key>
			<string>{0, 144}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>
// Array oluşturmak için aşağıdaki gibi bir yapı kullanıyoruz, arrayin içindeki verilerin tipini önceden belirleyebiliyoruz.
let intArray: [Int] = [1,2,3]
intArray[2]
let takım = [dogancan, ahmet]
</string>
			<key>ModifiedRange</key>
			<string>{191, 198}</string>
			<key>OriginalContent</key>
			<string>let takım: [String] = [dogancan, ahmet]
</string>
			<key>OriginalRange</key>
			<string>{48, 40}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>
//Set oluştururken Set([]) yapısını kullanıyoruz. Setin özelliği, sadece unique(benzersiz) olan değerleri tutuyor.
let renkler = Set(["kırmızı","mavi", "yeşil", "turuncu", "mavi"])
renkler
var name = (first: "Doğancan", last: "Mavideniz")
name.0 //same
name.first //same her iki şekilde de kullanabiliyoruz.
    //Dict örneği
let Heights = [
    "Doğancan":190,
    "Ahmet": 189,
    "Ayşe": 185,
    "Mehmet": 230,
]
Heights["Doğancan"]

    //example
let icecream = [
    "Doğancan": "Magnum",
    "Ahmet": "Cornet",
    "Mehmet": "Meybuz" // :)
]
icecream["Doğancan"]
icecream["Mehmet"]
icecream["Magnum", default: "Unknown"] //does not work, cool

    //for create empty dict
var dogan = [String]()
dogan = ["32"] //array'e element ekleme yolu
dogan.append("33") //array'e element ekleme yolu 2
dogan

var emptydict = [String: String]()
emptydict = ["Artık":"Boş değil"]
emptydict["Artık"]

var emptyarray = [Int]()
var emptyset = Set&lt;Int&gt;()
var emptyadict = Dictionary&lt;String, Int&gt;()

//Enum kullanımı, nasıl anlatsam bilemedim. Sadece belirli ihtimallerin gerçekleşeceği durumlarda kullanılıyor.
//Başarı durumu, başarılı ya da başarısız. Bir diğer ihtimal yok.
enum Gunler{
    case Pazartesi
    case Salı
    case Çarşamba
    case Perşembe
}
var bugun = Gunler.Salı
bugun

    //other example
enum Result{
    case succes
    case failure
}
let result4 = Result.failure
result4

    //enum example
enum planet: Int{
    case dunya
    case mars
    case jupiter
}
let jupiter = planet(rawValue: 2)
jupiter

    //operator overloading

let ad = "dogancan "
let tam = ad + "mavideniz"
var score = 100
score += 5

    //switch case
let havaDurumu = "yagmurlu"
switch havaDurumu{
case "gunesli":
    print("Hava çok güzel!")
case "yagmurlu":
    print("Şemsiyeni al!")
case "karli":
    print("Kalın giyin!")
default:
    print("Selam, günaydın")
}

//diğer switch case örneği
let Menu = "anaYemek"
switch Menu{
case "anaYemek":
    print("Kurufasulye, pilav, yemek aklıma gelmedi......")
case "Tatlı":
    print("Kazandibi puding sütlaç")
case "Salata":
    print("Gevurdağı, Çoban")
default:
    print("Yemek yok pasta ye!")
}

//If else example
let order = 299
if order &lt;= 299 {
    print("Sayı \(order) dan küçük ya da eşit")
}
else if order&lt;200 {
    print("Testing")
}

else{
    print("Whateverrr!")
    
}

//Switch-case example
let Final:Double = 45
let Vize:Double = 35
let sonuc = ((Final*0.6)+(Vize*0.4))
switch sonuc {
case 40..&lt;50:
    print("Sınavı geçtin, ortalaman \(sonuc)")
case 30..&lt;40:
    print("Büte kaldın! :(")
default:
    print("Sınavdan kaldın, ortalaman \(sonuc)") 
}

//Loops

let count = 1...99
print(count)

for number in 1...10 {
    print("Selam! \(number)")
}

print("Players gonna ")

for _ in 1...5 {
    print("play")
}

var new_number = 1

while new_number &lt;= 10 {
    print(new_number)
    new_number += 1
}

print("Sayı 10'a eşitlendi.")

    //Repeat Örneği
repeat {
    print("Bu satırı çalıştırır, ama döngü çalışmaz!!!!")
} while false

var countDown = 10
while countDown &gt;= 0 {
    print(countDown)
    
    if countDown == 4 {
        print("I'm bored. Let's go now!")
        break
    }
    
    countDown -= 1
}

//Continue

for i in 1...10 {
    if i % 2 == 1 {
        continue
    }
    
    print(i)
}

//infinite loop
var counter = 0

while true {
    print(" ")
    counter += 1
    
    if counter &lt;= 23 {
        break
    }
}


// Functions

func Selamla() {
    print("Hoşgeldin!")
}

Selamla()

    //Kare alma örneği bir klasiktir...
func karesiniAl(number: Int){
    print("\(number) sayısının karesi ",number*number)
}
karesiniAl(number: 6)
    //return de kullanabiliriz, bu hali daha worth bence
func karesiniAl2(number: Int) -&gt; Int{ //ne döndüreceğini de -&gt; ile belirlemek lazımmış
    return number*number
}
print(karesiniAl2(number: 6))
    //
func sayHello(to name: String) {
    print("Hello, \(name)!")
}
sayHello(to: "Doğancan")

    // apayrı bir örnek...
func Sellamla(kimi name:String, durum:Bool = true){
    if durum == true{
        print("Hoşgeldin canım \(name)!")
        
    }else{
        print("Niye geldin \(name)?!")
    }
}

Sellamla(kimi: "Doğa", durum: false)
Sellamla(kimi: "Doğan", durum: true)

    //Closures
let newClosures = {
    "Selam Dost!"
}
print(newClosures())

    // other example
let Drive = { (yolcu: String) in
    print("Yolcu adı \(yolcu)")
}

Drive("Ahmet")

    //Return for Closures
let drivingWithReturn = { (place: String) -&gt; String in
    return "I'm going to \(place) in my car"
}

//

func travel(action: () -&gt; Void) {
    print("I'm getting ready to go.")
    action()
    print("I arrived!")
}

travel() {
    print("I'm driving in my car")
}

travel {
    print("I'm driving in my car")
} //Trailling Closure Syntax olduğu için ()'e bile gerek kalmadı, zaten tek bir parametre var.
</string>
			<key>ModifiedRange</key>
			<string>{398, 4811}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{97, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
